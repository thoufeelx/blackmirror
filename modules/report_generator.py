"""
Report generator module for creating comprehensive reconnaissance reports
"""

import os
import json
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

class ReportGenerator:
    def __init__(self, config):
        self.config = config
        
    def generate_report(self, results: Dict[str, Any], format_type: str) -> str:
        """Generate report in specified format"""
        if format_type == 'markdown':
            return self._generate_markdown_report(results)
        elif format_type == 'html':
            return self._generate_html_report(results)
        elif format_type == 'json':
            return self._generate_json_report(results)
        else:
            raise ValueError(f"Unsupported format: {format_type}")
    
    def _generate_markdown_report(self, results: Dict[str, Any]) -> str:
        """Generate Markdown report"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Create output directory
        output_dir = self.config.get('reporting.output_dir', 'reports')
        os.makedirs(output_dir, exist_ok=True)
        
        # Generate filename
        target = results.get('target', 'unknown')
        filename = f"recon-{target}-{datetime.now().strftime('%Y%m%d-%H%M%S')}.md"
        filepath = os.path.join(output_dir, filename)
        
        with open(filepath, 'w') as f:
            f.write(f"# Reconnaissance Report\n\n")
            f.write(f"**Target:** {target}\n")
            f.write(f"**Scan Date:** {timestamp}\n")
            f.write(f"**Generated by:** blackmirror\n\n")
            
            # Executive Summary
            f.write("## Executive Summary\n\n")
            f.write(self._generate_summary_section(results))
            
            # Port Scan Results
            if results.get('ports'):
                f.write("## Port Scan Results\n\n")
                f.write(self._generate_ports_section(results['ports']))
            
            # Web Reconnaissance
            if results.get('web'):
                f.write("## Web Reconnaissance\n\n")
                f.write(self._generate_web_section(results['web']))
            
            # SSL Analysis
            if results.get('ssl'):
                f.write("## SSL/TLS Analysis\n\n")
                f.write(self._generate_ssl_section(results['ssl']))
            
            # Vulnerability Assessment
            if results.get('vulns'):
                f.write("## Vulnerability Assessment\n\n")
                f.write(self._generate_vulns_section(results['vulns']))
            
            # Passive Reconnaissance
            if results.get('passive'):
                f.write("## Passive Reconnaissance\n\n")
                f.write(self._generate_passive_section(results['passive']))
            
            # Recommendations
            f.write("## Recommendations\n\n")
            f.write(self._generate_recommendations_section(results))
            
            # Technical Details
            f.write("## Technical Details\n\n")
            f.write(self._generate_technical_details(results))
        
        return filepath
    
    def _generate_html_report(self, results: Dict[str, Any]) -> str:
        """Generate HTML report"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Create output directory
        output_dir = self.config.get('reporting.output_dir', 'reports')
        os.makedirs(output_dir, exist_ok=True)
        
        # Generate filename
        target = results.get('target', 'unknown')
        filename = f"recon-{target}-{datetime.now().strftime('%Y%m%d-%H%M%S')}.html"
        filepath = os.path.join(output_dir, filename)
        
        html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reconnaissance Report - {target}</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }}
        h1 {{ color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }}
        h2 {{ color: #34495e; margin-top: 30px; }}
        h3 {{ color: #7f8c8d; }}
        .summary {{ background: #ecf0f1; padding: 20px; border-radius: 5px; margin: 20px 0; }}
        .vulnerability {{ margin: 10px 0; padding: 15px; border-radius: 5px; }}
        .critical {{ background: #ffebee; border-left: 5px solid #f44336; }}
        .high {{ background: #fff3e0; border-left: 5px solid #ff9800; }}
        .medium {{ background: #fff8e1; border-left: 5px solid #ffc107; }}
        .low {{ background: #e8f5e8; border-left: 5px solid #4caf50; }}
        .info {{ background: #e3f2fd; border-left: 5px solid #2196f3; }}
        .port-list {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; }}
        .port-item {{ background: #f8f9fa; padding: 10px; border-radius: 5px; border: 1px solid #dee2e6; }}
        .tech-list {{ display: flex; flex-wrap: wrap; gap: 10px; }}
        .tech-item {{ background: #e3f2fd; padding: 5px 10px; border-radius: 15px; font-size: 0.9em; }}
        table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
        th, td {{ padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }}
        th {{ background-color: #f2f2f2; font-weight: bold; }}
        .recommendation {{ background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 10px 0; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üîç Reconnaissance Report</h1>
        
        <div class="summary">
            <h2>üìä Executive Summary</h2>
            <p><strong>Target:</strong> {target}</p>
            <p><strong>Scan Date:</strong> {timestamp}</p>
            <p><strong>Generated by:</strong> blackmirror</p>
        </div>
        
        {self._generate_html_ports_section(results.get('ports', {}))}
        {self._generate_html_web_section(results.get('web', {}))}
        {self._generate_html_ssl_section(results.get('ssl', {}))}
        {self._generate_html_vulns_section(results.get('vulns', {}))}
        {self._generate_html_passive_section(results.get('passive', {}))}
        
        <h2>üí° Recommendations</h2>
        {self._generate_html_recommendations(results)}
        
        <h2>üîß Technical Details</h2>
        <pre><code>{json.dumps(results, indent=2)}</code></pre>
    </div>
</body>
</html>
        """
        
        with open(filepath, 'w') as f:
            f.write(html_content)
        
        return filepath
    
    def _generate_json_report(self, results: Dict[str, Any]) -> str:
        """Generate JSON report"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Create output directory
        output_dir = self.config.get('reporting.output_dir', 'reports')
        os.makedirs(output_dir, exist_ok=True)
        
        # Generate filename
        target = results.get('target', 'unknown')
        filename = f"recon-{target}-{datetime.now().strftime('%Y%m%d-%H%M%S')}.json"
        filepath = os.path.join(output_dir, filename)
        
        # Add metadata
        report_data = {
            'metadata': {
                'target': target,
                'scan_date': timestamp,
                'generator': 'blackmirror',
                'version': '1.0.0'
            },
            'results': results
        }
        
        with open(filepath, 'w') as f:
            json.dump(report_data, f, indent=2)
        
        return filepath
    
    def _generate_summary_section(self, results: Dict[str, Any]) -> str:
        """Generate executive summary section"""
        summary = []
        
        # Count vulnerabilities
        vulns = results.get('vulns', {})
        critical_count = len(vulns.get('critical', []))
        high_count = len(vulns.get('high', []))
        medium_count = len(vulns.get('medium', []))
        low_count = len(vulns.get('low', []))
        
        # Count open ports
        ports = results.get('ports', {})
        open_ports_count = len(ports.get('open_ports', []))
        
        summary.append(f"- **Open Ports:** {open_ports_count}")
        summary.append(f"- **Critical Vulnerabilities:** {critical_count}")
        summary.append(f"- **High Risk Vulnerabilities:** {high_count}")
        summary.append(f"- **Medium Risk Vulnerabilities:** {medium_count}")
        summary.append(f"- **Low Risk Vulnerabilities:** {low_count}")
        
        if results.get('web'):
            web = results['web']
            tech_count = len(web.get('technologies', []))
            summary.append(f"- **Web Technologies Detected:** {tech_count}")
        
        if results.get('ssl'):
            ssl = results['ssl']
            vuln_count = len(ssl.get('vulnerabilities', []))
            summary.append(f"- **SSL Vulnerabilities:** {vuln_count}")
        
        return '\n'.join(summary) + '\n\n'
    
    def _generate_ports_section(self, ports: Dict[str, Any]) -> str:
        """Generate ports section for Markdown"""
        content = []
        
        if ports.get('open_ports'):
            content.append("### Open Ports")
            for port, service in ports['open_ports']:
                content.append(f"- Port {port} ({service})")
            content.append("")
        
        if ports.get('services'):
            content.append("### Service Details")
            for port, service_info in ports['services'].items():
                content.append(f"- **Port {port}:** {service_info.get('name', 'unknown')}")
                if service_info.get('product'):
                    content.append(f"  - Product: {service_info['product']}")
                if service_info.get('version'):
                    content.append(f"  - Version: {service_info['version']}")
            content.append("")
        
        if ports.get('os_info'):
            content.append(f"### Operating System")
            content.append(f"- {ports['os_info']}")
            content.append("")
        
        return '\n'.join(content)
    
    def _generate_web_section(self, web: Dict[str, Any]) -> str:
        """Generate web section for Markdown"""
        content = []
        
        if web.get('technologies'):
            content.append("### Technologies Detected")
            for tech in web['technologies']:
                content.append(f"- {tech}")
            content.append("")
        
        if web.get('headers'):
            content.append("### Interesting Headers")
            for header, value in web['headers'].items():
                content.append(f"- **{header}:** {value}")
            content.append("")
        
        if web.get('files'):
            content.append("### Interesting Files")
            for file in web['files']:
                content.append(f"- {file}")
            content.append("")
        
        return '\n'.join(content)
    
    def _generate_ssl_section(self, ssl: Dict[str, Any]) -> str:
        """Generate SSL section for Markdown"""
        content = []
        
        if ssl.get('issuer'):
            content.append("### Certificate Information")
            content.append(f"- **Issuer:** {ssl['issuer']}")
            if ssl.get('subject'):
                content.append(f"- **Subject:** {ssl['subject']}")
            if ssl.get('valid_until'):
                content.append(f"- **Valid Until:** {ssl['valid_until']}")
            content.append("")
        
        if ssl.get('strong_ciphers') or ssl.get('weak_ciphers'):
            content.append("### Cipher Analysis")
            content.append(f"- **Strong Ciphers:** {ssl.get('strong_ciphers', 0)}")
            content.append(f"- **Weak Ciphers:** {ssl.get('weak_ciphers', 0)}")
            content.append("")
        
        if ssl.get('vulnerabilities'):
            content.append("### SSL Vulnerabilities")
            for vuln in ssl['vulnerabilities']:
                content.append(f"- ‚ö†Ô∏è {vuln}")
            content.append("")
        
        return '\n'.join(content)
    
    def _generate_vulns_section(self, vulns: Dict[str, Any]) -> str:
        """Generate vulnerabilities section for Markdown"""
        content = []
        
        severity_levels = ['critical', 'high', 'medium', 'low', 'info']
        severity_icons = {
            'critical': 'üî¥',
            'high': 'üü†',
            'medium': 'üü°',
            'low': 'üü¢',
            'info': 'üîµ'
        }
        
        for severity in severity_levels:
            vuln_list = vulns.get(severity, [])
            if vuln_list:
                content.append(f"### {severity.title()} Risk Vulnerabilities")
                for vuln in vuln_list:
                    icon = severity_icons.get(severity, '‚Ä¢')
                    name = vuln.get('name', vuln.get('info', 'Unknown'))
                    description = vuln.get('description', vuln.get('description', ''))
                    content.append(f"- {icon} **{name}**")
                    if description:
                        content.append(f"  - {description}")
                content.append("")
        
        return '\n'.join(content)
    
    def _generate_passive_section(self, passive: Dict[str, Any]) -> str:
        """Generate passive reconnaissance section for Markdown"""
        content = []
        
        if passive.get('whois'):
            whois = passive['whois']
            content.append("### WHOIS Information")
            if whois.get('registrar'):
                content.append(f"- **Registrar:** {whois['registrar']}")
            if whois.get('creation_date'):
                content.append(f"- **Created:** {whois['creation_date']}")
            if whois.get('expiration_date'):
                content.append(f"- **Expires:** {whois['expiration_date']}")
            content.append("")
        
        if passive.get('dns'):
            dns = passive['dns']
            content.append("### DNS Records")
            if dns.get('a_records'):
                content.append(f"- **A Records:** {', '.join(dns['a_records'])}")
            if dns.get('mx_records'):
                content.append(f"- **MX Records:** {', '.join(dns['mx_records'])}")
            content.append("")
        
        if passive.get('geolocation'):
            geo = passive['geolocation']
            content.append("### Geolocation")
            if geo.get('country'):
                content.append(f"- **Country:** {geo['country']}")
            if geo.get('city'):
                content.append(f"- **City:** {geo['city']}")
            if geo.get('isp'):
                content.append(f"- **ISP:** {geo['isp']}")
            content.append("")
        
        return '\n'.join(content)
    
    def _generate_recommendations_section(self, results: Dict[str, Any]) -> str:
        """Generate recommendations section"""
        recommendations = []
        
        # Port-based recommendations
        ports = results.get('ports', {})
        open_ports = [port for port, service in ports.get('open_ports', [])]
        
        if '23' in open_ports:
            recommendations.append("- **Disable Telnet:** Replace with SSH for secure remote access")
        
        if '21' in open_ports:
            recommendations.append("- **Secure FTP:** Use SFTP or FTPS instead of plain FTP")
        
        if '3389' in open_ports:
            recommendations.append("- **Secure RDP:** Enable Network Level Authentication")
        
        # Vulnerability-based recommendations
        vulns = results.get('vulns', {})
        if vulns.get('critical') or vulns.get('high'):
            recommendations.append("- **Address Critical/High Vulnerabilities:** Prioritize fixing these immediately")
        
        # SSL-based recommendations
        ssl = results.get('ssl', {})
        if ssl.get('vulnerabilities'):
            recommendations.append("- **Fix SSL Vulnerabilities:** Update SSL/TLS configuration")
        
        if not recommendations:
            recommendations.append("- **No immediate action required:** Target appears to be well-secured")
        
        return '\n'.join(recommendations) + '\n\n'
    
    def _generate_technical_details(self, results: Dict[str, Any]) -> str:
        """Generate technical details section"""
        return f"```json\n{json.dumps(results, indent=2)}\n```\n"
    
    # HTML-specific methods
    def _generate_html_ports_section(self, ports: Dict[str, Any]) -> str:
        """Generate HTML ports section"""
        if not ports:
            return ""
        
        html = "<h2>üîç Port Scan Results</h2>"
        
        if ports.get('open_ports'):
            html += "<h3>Open Ports</h3><div class='port-list'>"
            for port, service in ports['open_ports']:
                html += f"<div class='port-item'>Port {port} ({service})</div>"
            html += "</div>"
        
        return html
    
    def _generate_html_web_section(self, web: Dict[str, Any]) -> str:
        """Generate HTML web section"""
        if not web:
            return ""
        
        html = "<h2>üïµÔ∏è Web Reconnaissance</h2>"
        
        if web.get('technologies'):
            html += "<h3>Technologies Detected</h3><div class='tech-list'>"
            for tech in web['technologies']:
                html += f"<span class='tech-item'>{tech}</span>"
            html += "</div>"
        
        return html
    
    def _generate_html_ssl_section(self, ssl: Dict[str, Any]) -> str:
        """Generate HTML SSL section"""
        if not ssl:
            return ""
        
        html = "<h2>üõ°Ô∏è SSL/TLS Analysis</h2>"
        
        if ssl.get('vulnerabilities'):
            html += "<h3>SSL Vulnerabilities</h3>"
            for vuln in ssl['vulnerabilities']:
                html += f"<div class='vulnerability high'>‚ö†Ô∏è {vuln}</div>"
        
        return html
    
    def _generate_html_vulns_section(self, vulns: Dict[str, Any]) -> str:
        """Generate HTML vulnerabilities section"""
        if not vulns:
            return ""
        
        html = "<h2>üõ°Ô∏è Vulnerability Assessment</h2>"
        
        severity_levels = ['critical', 'high', 'medium', 'low', 'info']
        severity_classes = {
            'critical': 'critical',
            'high': 'high',
            'medium': 'medium',
            'low': 'low',
            'info': 'info'
        }
        
        for severity in severity_levels:
            vuln_list = vulns.get(severity, [])
            if vuln_list:
                html += f"<h3>{severity.title()} Risk Vulnerabilities</h3>"
                for vuln in vuln_list:
                    css_class = severity_classes.get(severity, 'info')
                    name = vuln.get('name', vuln.get('info', 'Unknown'))
                    description = vuln.get('description', '')
                    html += f"<div class='vulnerability {css_class}'>"
                    html += f"<strong>{name}</strong>"
                    if description:
                        html += f"<br>{description}"
                    html += "</div>"
        
        return html
    
    def _generate_html_passive_section(self, passive: Dict[str, Any]) -> str:
        """Generate HTML passive reconnaissance section"""
        if not passive:
            return ""
        
        html = "<h2>üåê Passive Reconnaissance</h2>"
        
        if passive.get('whois'):
            whois = passive['whois']
            html += "<h3>WHOIS Information</h3><table>"
            if whois.get('registrar'):
                html += f"<tr><td><strong>Registrar:</strong></td><td>{whois['registrar']}</td></tr>"
            if whois.get('creation_date'):
                html += f"<tr><td><strong>Created:</strong></td><td>{whois['creation_date']}</td></tr>"
            html += "</table>"
        
        return html
    
    def _generate_html_recommendations(self, results: Dict[str, Any]) -> str:
        """Generate HTML recommendations"""
        recommendations = []
        
        # Add recommendations based on findings
        if results.get('vulns', {}).get('critical'):
            recommendations.append("Address critical vulnerabilities immediately")
        
        if results.get('vulns', {}).get('high'):
            recommendations.append("Prioritize fixing high-risk vulnerabilities")
        
        if not recommendations:
            recommendations.append("No immediate action required - target appears well-secured")
        
        html = ""
        for rec in recommendations:
            html += f"<div class='recommendation'>üí° {rec}</div>"
        
        return html 